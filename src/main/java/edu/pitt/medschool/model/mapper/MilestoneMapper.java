package edu.pitt.medschool.model.mapper;

import edu.pitt.medschool.model.dto.Milestone;
import edu.pitt.medschool.model.dto.MilestoneExample;
import java.util.List;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;

@Mapper
public interface MilestoneMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@SelectProvider(type = MilestoneSqlProvider.class, method = "countByExample")
	long countByExample(MilestoneExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@DeleteProvider(type = MilestoneSqlProvider.class, method = "deleteByExample")
	int deleteByExample(MilestoneExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@Insert({ "insert into milestone (id, date, ", "numPatients, numCSV, ", "type)",
			"values (#{id,jdbcType=INTEGER}, #{date,jdbcType=TIMESTAMP}, ",
			"#{numpatients,jdbcType=INTEGER}, #{numcsv,jdbcType=INTEGER}, ", "#{type,jdbcType=TINYINT})" })
	int insert(Milestone record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@InsertProvider(type = MilestoneSqlProvider.class, method = "insertSelective")
	int insertSelective(Milestone record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@SelectProvider(type = MilestoneSqlProvider.class, method = "selectByExample")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "date", property = "date", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "numPatients", property = "numpatients", jdbcType = JdbcType.INTEGER),
			@Result(column = "numCSV", property = "numcsv", jdbcType = JdbcType.INTEGER),
			@Result(column = "type", property = "type", jdbcType = JdbcType.TINYINT) })
	List<Milestone> selectByExampleWithRowbounds(MilestoneExample example, RowBounds rowBounds);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@SelectProvider(type = MilestoneSqlProvider.class, method = "selectByExample")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "date", property = "date", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "numPatients", property = "numpatients", jdbcType = JdbcType.INTEGER),
			@Result(column = "numCSV", property = "numcsv", jdbcType = JdbcType.INTEGER),
			@Result(column = "type", property = "type", jdbcType = JdbcType.TINYINT) })
	List<Milestone> selectByExample(MilestoneExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@UpdateProvider(type = MilestoneSqlProvider.class, method = "updateByExampleSelective")
	int updateByExampleSelective(@Param("record") Milestone record, @Param("example") MilestoneExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table milestone
	 * @mbg.generated
	 */
	@UpdateProvider(type = MilestoneSqlProvider.class, method = "updateByExample")
	int updateByExample(@Param("record") Milestone record, @Param("example") MilestoneExample example);

	@Select({"select m.id as id, m.date as date, m.numPatients as numPatients, m.numCSV as numCSV from milestone m " +
			"where m.type = 1"})
    List<Milestone> selectAll();

	@Select({"select m.type from milestone m where m.date>= all(select date from milestone)"})
    byte getlatest();
}