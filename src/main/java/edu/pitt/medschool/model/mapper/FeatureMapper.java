package edu.pitt.medschool.model.mapper;

import edu.pitt.medschool.controller.analysis.vo.ColumnVO;
import edu.pitt.medschool.model.dto.Feature;
import edu.pitt.medschool.model.dto.FeatureExample;
import edu.pitt.medschool.model.dto.FeatureKey;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

@Mapper
public interface FeatureMapper {

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @SelectProvider(type = FeatureSqlProvider.class, method = "countByExample")
    long countByExample(FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @DeleteProvider(type = FeatureSqlProvider.class, method = "deleteByExample")
    int deleteByExample(FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @Delete({ "delete from feature", "where id = #{id,jdbcType=INTEGER}", "and SID = #{sid,jdbcType=VARCHAR}",
            "and SID_Count = #{sidCount,jdbcType=INTEGER}" })
    int deleteByPrimaryKey(FeatureKey key);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @Insert({ "insert into feature (id, SID, ", "SID_Count, type, ", "electrode, freq_low, ", "freq_high, brain_location, ", "notes)",
            "values (#{id,jdbcType=INTEGER}, #{sid,jdbcType=VARCHAR}, ", "#{sidCount,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR}, ",
            "#{electrode,jdbcType=VARCHAR}, #{freqLow,jdbcType=DOUBLE}, ", "#{freqHigh,jdbcType=DOUBLE}, #{brainLocation,jdbcType=VARCHAR}, ",
            "#{notes,jdbcType=VARCHAR})" })
    int insert(Feature record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @InsertProvider(type = FeatureSqlProvider.class, method = "insertSelective")
    int insertSelective(Feature record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @SelectProvider(type = FeatureSqlProvider.class, method = "selectByExample")
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "SID", property = "sid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "SID_Count", property = "sidCount", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR),
            @Result(column = "electrode", property = "electrode", jdbcType = JdbcType.VARCHAR),
            @Result(column = "freq_low", property = "freqLow", jdbcType = JdbcType.DOUBLE),
            @Result(column = "freq_high", property = "freqHigh", jdbcType = JdbcType.DOUBLE),
            @Result(column = "brain_location", property = "brainLocation", jdbcType = JdbcType.VARCHAR),
            @Result(column = "notes", property = "notes", jdbcType = JdbcType.VARCHAR) })
    List<Feature> selectByExampleWithRowbounds(FeatureExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @SelectProvider(type = FeatureSqlProvider.class, method = "selectByExample")
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "SID", property = "sid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "SID_Count", property = "sidCount", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR),
            @Result(column = "electrode", property = "electrode", jdbcType = JdbcType.VARCHAR),
            @Result(column = "freq_low", property = "freqLow", jdbcType = JdbcType.DOUBLE),
            @Result(column = "freq_high", property = "freqHigh", jdbcType = JdbcType.DOUBLE),
            @Result(column = "brain_location", property = "brainLocation", jdbcType = JdbcType.VARCHAR),
            @Result(column = "notes", property = "notes", jdbcType = JdbcType.VARCHAR) })
    List<Feature> selectByExample(FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @Select({ "select", "id, SID, SID_Count, type, electrode, freq_low, freq_high, brain_location, notes", "from feature",
            "where id = #{id,jdbcType=INTEGER}", "and SID = #{sid,jdbcType=VARCHAR}", "and SID_Count = #{sidCount,jdbcType=INTEGER}" })
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "SID", property = "sid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "SID_Count", property = "sidCount", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR),
            @Result(column = "electrode", property = "electrode", jdbcType = JdbcType.VARCHAR),
            @Result(column = "freq_low", property = "freqLow", jdbcType = JdbcType.DOUBLE),
            @Result(column = "freq_high", property = "freqHigh", jdbcType = JdbcType.DOUBLE),
            @Result(column = "brain_location", property = "brainLocation", jdbcType = JdbcType.VARCHAR),
            @Result(column = "notes", property = "notes", jdbcType = JdbcType.VARCHAR) })
    Feature selectByPrimaryKey(FeatureKey key);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @UpdateProvider(type = FeatureSqlProvider.class, method = "updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Feature record, @Param("example") FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @UpdateProvider(type = FeatureSqlProvider.class, method = "updateByExample")
    int updateByExample(@Param("record") Feature record, @Param("example") FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @UpdateProvider(type = FeatureSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Feature record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table feature
     * @mbg.generated
     */
    @Update({ "update feature", "set type = #{type,jdbcType=VARCHAR},", "electrode = #{electrode,jdbcType=VARCHAR},",
            "freq_low = #{freqLow,jdbcType=DOUBLE},", "freq_high = #{freqHigh,jdbcType=DOUBLE},",
            "brain_location = #{brainLocation,jdbcType=VARCHAR},", "notes = #{notes,jdbcType=VARCHAR}", "where id = #{id,jdbcType=INTEGER}",
            "and SID = #{sid,jdbcType=VARCHAR}", "and SID_Count = #{sidCount,jdbcType=INTEGER}" })
    int updateByPrimaryKey(Feature record);

    @Select({
        "select",
        "DISTINCT(type)",
        "from feature",
    })
    @ResultType(String.class)
    @Results({
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR)
    })
    List<String> selectAllMeasures();

    @Select({
        "SELECT", 
        "m.suffix AS `column`,",
        "(CASE",
        "WHEN m.comment IS NULL THEN CONCAT(ROUND(m.range_low, 3), ' ~ ', ROUND(m.range_high, 3))",
        "ELSE m.comment",
        "END) AS representation",
        "FROM feature f, feature_mapping m",
        "WHERE f.SID = #{electrode} AND f.type = m.type"
    })
    @Results({ @Result(column = "column", property = "column", jdbcType = JdbcType.VARCHAR),
            @Result(column = "representation", property = "representation", jdbcType = JdbcType.VARCHAR) })
    List<ColumnVO> selectColumnVOsBySet(String electrode);

    @Select({
            "SELECT CONCAT(f.SID, m.suffix) AS col",
            "FROM feature f",
            "LEFT JOIN feature_mapping m ON f.type = m.type",
            "WHERE f.`type` = '${type}'",
            "AND (CASE WHEN ${querySid} = TRUE THEN SID IN (${elecString}) ELSE electrode IN (${elecString}) END)",
            "AND (CASE WHEN m.comment IS NULL THEN range_low IN (${colString}) ELSE m.comment IN (${colString}) END)"
    })
    @ResultType(String.class)
    @Results({
            @Result(column = "col", property = "col", jdbcType = JdbcType.VARCHAR)
    })
    List<String> selectColumnsByAggregationGroupColumns(
            @Param("type") String type,
            @Param("elecString") String elecString,
            @Param("colString") String colString,
            @Param("querySid") boolean querySid);
}